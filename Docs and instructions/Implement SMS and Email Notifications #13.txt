Sending SMS in Django Using Twilio

Prerequisites
A Twilio account. Sign up at Twilio.
Python environment set up with Django installed.
Twilio credentials: ACCOUNT_SID, AUTH_TOKEN, and a Twilio phone number.

Step-by-Step Guide
1. Install Required Packages
Install the twilio and django-environ packages using pip:
pip install twilio django-environ

2. Configure Environment Variables
Create a .env file in your projectâ€™s root directory and add your Twilio credentials:
# .env
TWILIO_ACCOUNT_SID=your_twilio_account_sid
TWILIO_AUTH_TOKEN=your_twilio_auth_token
TWILIO_PHONE_NUMBER=your_twilio_phone_number

3. Update settings.py
Update your settings.py to read the environment variables:
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.getenv('TWILIO_PHONE_NUMBER')

4. Create Utility Function to Send SMS
Create a utils.py file (or add to an existing utilities module) with the SMS sending logic:

# utils.py

from twilio.rest import Client
from django.conf import settings
import logging

logger = logging.getLogger(__name__)

def send_sms(to_number, message):
    try:
        client = Client(settings.TWILIO_ACCOUNT_SID, settings.TWILIO_AUTH_TOKEN)
        client.messages.create(
            body=message,
            from_=settings.TWILIO_PHONE_NUMBER,
            to=to_number
        )
    except Exception as e:
        logger.error(f"Failed to send SMS: {e}")
        raise

5. Create a View to Trigger SMS
Add a view to handle SMS sending:

# views.py

from django.shortcuts import render
from django.http import HttpResponse
from .utils import send_sms

def send_sms_view(request):
    if request.method == 'POST':
        to_number = request.POST.get('to_number')
        message = request.POST.get('message')
        if not to_number or not message:
            return HttpResponse("Phone number and message are required.", status=400)
        try:
            send_sms(to_number, message)
            return render(request, 'sms_sent.html')
        except Exception as e:
            return HttpResponse(f"Failed to send SMS: {e}", status=500)
    return render(request, 'send_sms.html')

6. Create Templates
Create two HTML templates: one for the form to send SMS and one for the confirmation.

<!-- send_sms.html -->
<!DOCTYPE html>
<html>
<head>
    <title>Send SMS</title>
</head>
<body>
    <form method="post">
        {% csrf_token %}
        <label for="to_number">Phone Number:</label>
        <input type="text" id="to_number" name="to_number" required>
        <label for="message">Message:</label>
        <textarea id="message" name="message" required></textarea>
        <button type="submit">Send SMS</button>
    </form>
</body>
</html>

<!-- sms_sent.html -->
<!DOCTYPE html>
<html>
<head>
    <title>SMS Sent</title>
</head>
<body>
    <p>SMS has been sent successfully!</p>
</body>
</html>

7. Add URL Configuration
Add a URL pattern to map the view:

# urls.py

from django.urls import path
from .views import send_sms_view

urlpatterns = [
    path('send-sms/', send_sms_view, name='send_sms'),
]

8. Enable SMS Permissions (if needed)
Ensure your Twilio account is configured to send SMS to the desired region:

Log in to your Twilio Console.
Go to "Messaging" > "Settings" > "Geo Permissions".
Enable SMS permissions for the target region.
Summary
You have now integrated Twilio SMS functionality into your Django project. Users can send SMS messages by filling out a form, and the server handles sending the messages using Twilio's API.