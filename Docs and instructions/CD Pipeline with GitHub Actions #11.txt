Setup CI/CD Pipeline with GitHub Actions for Django Project
1. Create GitHub Actions Workflow File
GitHub Actions workflows are defined in YAML files placed in the .github/workflows directory of your repository.
Create a file named ci-cd.yml (or any name you prefer) in that directory.

# .github/workflows/ci-cd.yml

name: Django CI/CD

on:
  push:
    branches:
      - main  # change this to your main branch name
  pull_request:
    branches:
      - main  # change this to your main branch name

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # replace with your Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python manage.py test

    - name: Deploy to staging
      if: success()
      run: |
        # Add your deployment script or commands here
        # Example: python manage.py migrate

    - name: Deploy to production
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Add your production deployment script or commands here
        # Example: python manage.py collectstatic --noinput


2. Explanation of Workflow
Trigger: This workflow runs on push to the main branch and pull_request events targeting main branch.
Jobs:
build: Runs on an ubuntu-latest environment.
Steps:
Checkout code: Checks out your repository’s code.
Set up Python: Sets up the specified Python version.
Install dependencies: Installs Python dependencies from requirements.txt.
Run tests: Executes Django tests using python manage.py test.
Deploy to staging: Placeholder for staging deployment commands (optional).
Deploy to production: Placeholder for production deployment commands, runs only on successful push to main.

3. Customize Deployment Steps
Replace the placeholders (# Add your deployment script or commands here) with actual commands for your deployment process.
For production deployment, ensure to include steps like database migrations (python manage.py migrate), static file collection (python manage.py collectstatic), etc.

4. Commit and Push
Save the changes to ci-cd.yml and commit them to your main branch.
Push the changes to GitHub to trigger the CI/CD pipeline.

5. Monitor Workflow Runs
Go to the Actions tab in your GitHub repository to monitor the workflow runs.
View logs for each step to ensure tests pass and deployments succeed.

6. Further Customizations
Depending on your project’s requirements, you can add more jobs, customize environments, or integrate additional steps like code quality checks, security scans, etc.
This setup provides a basic CI/CD pipeline for your Django project using GitHub Actions. Adjustments may be needed based on your specific project structure and requirements.